#pragma once
#include "pch.h"

// This code is generated by Deepseek, some changes personally.

namespace UIFramework {
namespace Utils {

template <typename T>
class Singleton {
  public:
    Singleton(const Singleton&)            = delete;
    Singleton& operator=(const Singleton&) = delete;

    static auto& Get() { return _instance; }

    template <typename... Args>
    static std::shared_ptr<T> Instance(
        Args&&... args
    ) {
        std::call_once(_initFlag, [&] { _instance = std::make_shared<T>(std::forward<Args>(args)...); });
        return _instance;
    }

  protected:
    Singleton()          = default;
    virtual ~Singleton() = default;

  private:
    static std::shared_ptr<T> _instance;
    static std::once_flag     _initFlag;
};

// 静态成员初始化
template <typename T>
std::shared_ptr<T> Singleton<T>::_instance = nullptr;

template <typename T>
std::once_flag Singleton<T>::_initFlag;

} // namespace Utils
} // namespace UIFramework
